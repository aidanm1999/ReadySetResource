@model ReadySetResource.Areas.Apps.ViewModels.Employees.BusinessUserTypeViewModel
@{
    ViewBag.Title = "Add Type";
    Layout = "~/Areas/Apps/Views/Shared/_Layout.cshtml";
}

<style>
    .card {
        box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);
        transition: 0.3s;
        width: 100%;
        border-radius: 5px;
        word-wrap: break-word;
    }

        .card:hover {
            box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2);
        }

    img {
        border-radius: 5px 5px 0 0;
    }

    .container {
        padding: 2px 16px;
    }

    .center {
        margin: auto;
        width: 80%;
        padding: 10px;
    }
</style>


<div class="col-md-12">

    @Model.ErrorMessage


    @using (Html.BeginForm("AddTypePost", "Employees"))
    {


        @Html.ValidationSummary(true, "Please fix the following errors.")
        <div class="form-inlne col-md-4" style="padding-bottom:10px;">
            @Html.LabelFor(m => m.BusinessUserType.Name)
            @Html.TextBoxFor(m => m.BusinessUserType.Name, new { @class = "form-control", style = "width:150px;", placeholder = "Type Name" })
            @Html.ValidationMessageFor(m => m.BusinessUserType.Name)
        </div>
        <div class="form-inlne col-md-4" style="padding-bottom:10px;">
            @Html.LabelFor(m => m.BusinessUserType.Colour)
            # @Html.TextBoxFor(m => m.BusinessUserType.Colour, new { @class = "form-control", style = "width:150px;", placeholder = "Hex Colour" })
            @Html.ValidationMessageFor(m => m.BusinessUserType.Colour)
        </div>
        <div class="form-inlne col-md-4" style="padding-bottom:10px;padding-top:25px;">
            <p>
                <button type="submit" class="btn btn-primary" style="margin-left: 20px; float:right;">Save</button>
                @Html.ActionLink("Cancel", "Index", null, new { @class = "btn btn-default", style = " float:right;" })

            </p>
        </div>
        <hr>
        for (var counter = 0; counter < Model.Apps.Count(); counter++)
        {
            <div class="col-md-3 form-group">
                <div class="center">
                    <div class="card">
                        <img src='@string.Format("/Content/Images/apps/{0}.png", Model.Apps[counter].Link)' alt="@Model.Apps[counter].Name" style="width:100%; padding:20px;">
                        <div class="container">
                            <p style="text-align:center;padding-bottom:5px;">
                                @{
                                    var access = Model.Accesses.FirstOrDefault(a => a.AppId == Model.Apps[counter].Id);


                                    if (access == null)
                                    {

                                        <text>Neither</text>
                                    }
                                    else
                                    {
                                        var accessIndex = Model.Accesses.IndexOf(access);

                                        @Html.DropDownListFor(model => model.Accesses[accessIndex].AccessType,
                                        Model.Options.Select(x => new SelectListItem() { Value = x.Value, Text = x.Text, Selected = (x.Value == Model.Accesses[accessIndex].AccessType.ToString()) }).ToList(),
                                        new { @class = "form-control", style = "width:100%;" })
                                    }
                                }
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        }



        @Html.AntiForgeryToken()

        @Html.HiddenFor(m => m.BusinessUserType.Id)
        @Html.HiddenFor(m => m.BusinessUserType.BusinessId)
        @Html.HiddenFor(m => m.PreviousName)

        for (var i = 0; i < Model.Accesses.Count; i++)
        {
            @Html.HiddenFor(m => m.Accesses[i].Id)
            @Html.HiddenFor(m => m.Accesses[i].AppId)
            @Html.HiddenFor(m => m.Accesses[i].BusinessUserTypeId)
            @Html.HiddenFor(m => m.Accesses[i].App)
            @Html.HiddenFor(m => m.Accesses[i].BusinessUserType)

        }


    }
</div>


@*Generating client side validation*@
@section scripts
{
    @Scripts.Render("~/bundles/jqueryval")
}
