@model ReadySetResource.Areas.Apps.ViewModels.Dashboard.BusinessUserTypeViewModel
@{
    ViewBag.Title = "Edit Type";
    Layout = "~/Areas/Apps/Views/Shared/_Layout.cshtml";
}

<h2>Edit Type</h2>


<div class="col-md-3">

    @Model.ErrorMessage

    @using (Html.BeginForm("EditTypePost", "Dashboard"))
    {
        @Html.ValidationSummary(true, "Please fix the following errors.")
        <div class="form-group">
            @Html.LabelFor(m => m.BusinessUserType.Name)
            @Html.TextBoxFor(m => m.BusinessUserType.Name, new { @class = "form-control", style = "padding:10px" })
            @Html.ValidationMessageFor(m => m.BusinessUserType.Name)
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.BusinessUserType.Administrator)
            @Html.DropDownListFor(m => m.BusinessUserType.Administrator, Model.Options, new { style = "float:right;" })
            @Html.ValidationMessageFor(m => m.Options)
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.BusinessUserType.Calendar)
            @Html.DropDownListFor(m => m.BusinessUserType.Calendar, Model.Options, new { style = "float:right;" })
            @Html.ValidationMessageFor(m => m.Options)
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.BusinessUserType.Holidays)
            @Html.DropDownListFor(m => m.BusinessUserType.Holidays, Model.Options, new { style = "float:right;" })
            @Html.ValidationMessageFor(m => m.Options)
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.BusinessUserType.Meetings)
            @Html.DropDownListFor(m => m.BusinessUserType.Meetings, Model.Options, new { style = "float:right;" })
            @Html.ValidationMessageFor(m => m.Options)
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.BusinessUserType.Messenger)
            @Html.DropDownListFor(m => m.BusinessUserType.Messenger, Model.Options, new { style = "float:right;" })
            @Html.ValidationMessageFor(m => m.Options)
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.BusinessUserType.Store)
            @Html.DropDownListFor(m => m.BusinessUserType.Store, Model.Options, new { style = "float:right;" })
            @Html.ValidationMessageFor(m => m.Options)
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.BusinessUserType.Updates)
            @Html.DropDownListFor(m => m.BusinessUserType.Updates, Model.Options, new { style = "float:right;" })
            @Html.ValidationMessageFor(m => m.Options)
        </div>

        @Html.AntiForgeryToken()
        <p>
            @Html.ActionLink("Cancel", "Index", null, new { @class = "btn btn-default", style = "float:left" })
            @Html.ActionLink("Delete", "DeleteType", new { type = Model.BusinessUserType.Id }, new { @class = "btn btn-danger", style = "margin-left: 20px;" })
            <button type="submit" class="btn btn-primary" style="float:right;">Save</button>
        </p>
        @Html.HiddenFor(m => m.BusinessUserType.Id)
        @Html.HiddenFor(m => m.BusinessUserType.BusinessId)
        @Html.HiddenFor(m => m.PreviousName)

    }
</div>


@*Generating client side validation*@
@section scripts
{
    @Scripts.Render("~/bundles/jqueryval")
}
